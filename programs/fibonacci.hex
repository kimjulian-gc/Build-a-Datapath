v2.0 raw
# This is an automatically-generated PIPS machine code file

# 0x0000: nop
00010000 

# 0x0004: li $sp, 0xf800
0e01f800 

# 0x0008: li   $a0, 15
0201000f 

# 0x000c: jal  print_decimal_number
ff030070 

# 0x0010: li   $a0, 321
02010141 

# 0x0014: jal  print_decimal_number
ff030070 

# 0x0018: j    HALT
f001ff00 

# 0x001c: slt  $t0, $a0, $a1
76203000 

# 0x0020: bne  $t0, $zero, skip_loop
e6010030 

# 0x0024: sub  $a0, $a0, $a1
12203000 

# 0x0028: slt  $t0, $a0, $a1
76203000 

# 0x002c: beq  $t0, $zero, while_loop   # if (not a < b), continue looping
d6010024 

# 0x0030: addi $v0, $a0, 0                # solution is in $a0, copy to $v0
01210000 

# 0x0034: jr   $ra                            # Return to caller
f000f000 

# 0x0038: li   $t0, 0
06010000 

# 0x003c: slt  $t1, $a0, $a1
77203000 

# 0x0040: bne  $t1, $zero, div_done
e7010050 

# 0x0044: sub  $a0, $a0, $a1
12203000 

# 0x0048: addi $t0, $t0, 1
06610001 

# 0x004c: j   div_loop
f001003c 

# 0x0050: addi $v0, $t0, 0
01610000 

# 0x0054: jr   $ra  # Return quotient
f000f000 

# 0x0058: li   $v0, 0                       # Clear return register to use in code
01010000 

# 0x005c: beq  $a1, $zero, end_while
d301006c 

# 0x0060: add  $v0, $v0, $a0
01102000 

# 0x0064: addi $a1, $a1, -1
0331ffff 

# 0x0068: j    while
f001005c 

# 0x006c: jr   $ra                        # Return to caller
f000f000 

# 0x0070: addi $sp, $sp, -12
0ee1fff4 

# 0x0074: sw   $ra, 0($sp)
cfe10000 

# 0x0078: sw   $s0, 4($sp)
cae10004 

# 0x007c: sw   $s1, 8($sp)
cbe10008 

# 0x0080: li   $s0, 0
0a010000 

# 0x0084: addi $s1, $a0, 0
0b210000 

# 0x0088: j    while_cond_1
f00100bc 

# 0x008c: addi $a0, $s0, 0
02a10000 

# 0x0090: li   $a1, 10
0301000a 

# 0x0094: jal  product
ff030058 

# 0x0098: addi $s0, $v0, 0
0a110000 

# 0x009c: addi $a0, $s1, 0
02b10000 

# 0x00a0: li   $a1, 10
0301000a 

# 0x00a4: jal  remainder
ff03001c 

# 0x00a8: add  $s0, $s0, $v0
0aa01000 

# 0x00ac: addi $a0, $s1, 0
02b10000 

# 0x00b0: li   $a1, 10
0301000a 

# 0x00b4: jal  division
ff030038 

# 0x00b8: addi $s1, $v0, 0
0b110000 

# 0x00bc: bne $s1, $zero, while_1
eb01008c 

# 0x00c0: j   while_cond_2
f00100ec 

# 0x00c4: addi $a0, $s0, 0
02a10000 

# 0x00c8: li   $a1, 10
0301000a 

# 0x00cc: jal  remainder
ff03001c 

# 0x00d0: addi $t0, $v0, 0x30
06110030 

# 0x00d4: li   $t1, TERMINAL
0701ff10 

# 0x00d8: sb   $t0, 0($t1)
b6710000 

# 0x00dc: addi $a0, $s0, 0
02a10000 

# 0x00e0: li   $a1, 10
0301000a 

# 0x00e4: jal  division
ff030038 

# 0x00e8: addi $s0, $v0, 0
0a110000 

# 0x00ec: bne $s0, $zero, while_2
ea0100c4 

# 0x00f0: lw   $ra, 0($sp)
afe10000 

# 0x00f4: lw   $s0, 4($sp)
aae10004 

# 0x00f8: lw   $s1, 8($sp)
abe10008 

# 0x00fc: addi $sp, $sp, 12
0ee1000c 

# 0x0100: li   $t0, 0x0a
0601000a 

# 0x0104: li   $t1, TERMINAL
0701ff10 

# 0x0108: sb   $t0, 0($t1)
b6710000 

# 0x010c: jr   $ra
f000f000 
