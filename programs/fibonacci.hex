v2.0 raw
# This is an automatically-generated PIPS machine code file

# 0x0000: nop
00010000 

# 0x0004: li $sp, 0xf800
0e01f800 

# 0x0008: li  $s0, 0
0a010000 

# 0x000c: li  $s1, 15
0b01000f 

# 0x0010: j   while_cond_main
f0010028 

# 0x0014: addi $a0, $s0, 0
02a10000 

# 0x0018: jal fibonacci
ff030160 

# 0x001c: addi $a0, $v0, 0
02110000 

# 0x0020: jal  print_decimal_number
ff030084 

# 0x0024: addi $s0, $s0, 1
0aa10001 

# 0x0028: bne  $s0, $s1, while_main
eab10014 

# 0x002c: j    HALT
f001ff00 

# 0x0030: slt  $t0, $a0, $a1
76203000 

# 0x0034: bne  $t0, $zero, skip_loop
e6010044 

# 0x0038: sub  $a0, $a0, $a1
12203000 

# 0x003c: slt  $t0, $a0, $a1
76203000 

# 0x0040: beq  $t0, $zero, while_loop   # if (not a < b), continue looping
d6010038 

# 0x0044: addi $v0, $a0, 0                # solution is in $a0, copy to $v0
01210000 

# 0x0048: jr   $ra                            # Return to caller
f000f000 

# 0x004c: li   $t0, 0
06010000 

# 0x0050: slt  $t1, $a0, $a1
77203000 

# 0x0054: bne  $t1, $zero, div_done
e7010064 

# 0x0058: sub  $a0, $a0, $a1
12203000 

# 0x005c: addi $t0, $t0, 1
06610001 

# 0x0060: j   div_loop
f0010050 

# 0x0064: addi $v0, $t0, 0
01610000 

# 0x0068: jr   $ra  # Return quotient
f000f000 

# 0x006c: li   $v0, 0                       # Clear return register to use in code
01010000 

# 0x0070: beq  $a1, $zero, end_while
d3010080 

# 0x0074: add  $v0, $v0, $a0
01102000 

# 0x0078: addi $a1, $a1, -1
0331ffff 

# 0x007c: j    while
f0010070 

# 0x0080: jr   $ra                        # Return to caller
f000f000 

# 0x0084: push $ra
0ee1fffe cfe10000 

# 0x008c: push $s0
0ee1fffe cae10000 

# 0x0094: push $s1
0ee1fffe cbe10000 

# 0x009c: push $s2
0ee1fffe cce10000 

# 0x00a4: li   $s0, 0
0a010000 

# 0x00a8: li   $s2, 0
0c010000 

# 0x00ac: addi $s1, $a0, 0
0b210000 

# 0x00b0: j    while_cond_1
f00100e8 

# 0x00b4: addi $a0, $s0, 0
02a10000 

# 0x00b8: li   $a1, 10
0301000a 

# 0x00bc: jal  product
ff03006c 

# 0x00c0: addi $s0, $v0, 0
0a110000 

# 0x00c4: addi $a0, $s1, 0
02b10000 

# 0x00c8: li   $a1, 10
0301000a 

# 0x00cc: jal  remainder
ff030030 

# 0x00d0: add  $s0, $s0, $v0
0aa01000 

# 0x00d4: addi $a0, $s1, 0
02b10000 

# 0x00d8: li   $a1, 10
0301000a 

# 0x00dc: jal  division
ff03004c 

# 0x00e0: addi $s1, $v0, 0
0b110000 

# 0x00e4: addi $s2, $s2, 1 # count number of digits
0cc10001 

# 0x00e8: bne $s1, $zero, while_1
eb0100b4 

# 0x00ec: j   while_cond_2
f001011c 

# 0x00f0: addi $a0, $s0, 0
02a10000 

# 0x00f4: li   $a1, 10
0301000a 

# 0x00f8: jal  remainder
ff030030 

# 0x00fc: addi $t0, $v0, 0x30
06110030 

# 0x0100: li   $t1, TERMINAL
0701ff10 

# 0x0104: sb   $t0, 0($t1)
b6710000 

# 0x0108: addi $a0, $s0, 0
02a10000 

# 0x010c: li   $a1, 10
0301000a 

# 0x0110: jal  division
ff03004c 

# 0x0114: addi $s0, $v0, 0
0a110000 

# 0x0118: addi $s2, $s2, -1 # count remaining number of digits
0cc1ffff 

# 0x011c: bne $s0, $zero, while_2
ea0100f0 

# 0x0120: li   $t1, TERMINAL
0701ff10 

# 0x0124: li   $t0, 0x30
06010030 

# 0x0128: j   while_cond_3
f0010134 

# 0x012c: sb   $t0, 0($t1)
b6710000 

# 0x0130: addi $s2, $s2, -1 # count remaining number of digits
0cc1ffff 

# 0x0134: bne $s2, $zero, while_3
ec01012c 

# 0x0138: pop $ra
afe10000 0ee10002 

# 0x0140: pop $s0
aae10000 0ee10002 

# 0x0148: pop $s1
abe10000 0ee10002 

# 0x0150: li   $t0, 0x0a
0601000a 

# 0x0154: li   $t1, TERMINAL
0701ff10 

# 0x0158: sb   $t0, 0($t1)
b6710000 

# 0x015c: jr   $ra
f000f000 

# 0x0160: push $ra
0ee1fffe cfe10000 

# 0x0168: push $s0
0ee1fffe cae10000 

# 0x0170: push $s1
0ee1fffe cbe10000 

# 0x0178: li  $t0, 2
06010002 

# 0x017c: slt $t1, $a0, $t0
77206000 

# 0x0180: beq $t1, $zero, recursive
d701018c 

# 0x0184: li  $v0, 1
01010001 

# 0x0188: j   return_fib
f00101ac 

# 0x018c: addi $s0, $a0, 0
0a210000 

# 0x0190: addi $a0, $a0, -1
0221ffff 

# 0x0194: jal  fibonacci
ff030160 

# 0x0198: addi $s1, $v0, 0
0b110000 

# 0x019c: addi $a0, $s0, 0
02a10000 

# 0x01a0: addi $a0, $a0, -2
0221fffe 

# 0x01a4: jal  fibonacci
ff030160 

# 0x01a8: add  $v0, $s1, $v0
01b01000 

# 0x01ac: pop $ra
afe10000 0ee10002 

# 0x01b4: pop $s0
aae10000 0ee10002 

# 0x01bc: pop $s1
abe10000 0ee10002 

# 0x01c4: jr $ra
f000f000 
