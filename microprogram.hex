v2.0 raw
# This file holds the microprogram data that you should load into your
# datapath's Microprogram ROM. Each row holds a 16-bit value that you will
# break into control signals to execute an instruction with a given opcode.
# As you implement additional opcodes you will need to change the hexadecimal
# values below. Don't forget to add comments that describe the control signals
# each opcode is configured to send.

# Bit field documentation
# 0:   Write enable for the register file
# 1:   A invert for the ALU
# 2:   B invert for the ALU
# 3:   Carry in for the ALU
# 4-6: Operation for the ALU ()
# 7:   Jump instruction indication
# 8:   Branch instruction indication
# 9:   Branch Invert Control
# 10:  Use r0 instead of r2 as the second register file 
# 11:  Write enable for Memory
# 12:  (0) Byte or (1) Word
# 13:  Write data from ALU result (0) or Rd (1)
# 14:  ALU Dst

# Opcode 0: add
# Bits  7 6-4 3 2 1 0
#     0b0 000 0 0 0 1
# = 0x0001
0001

# Opcode 1: sub
# Bits  7 6-4 3 2 1 0
#     0b0 000 1 1 0 1
# Explanation: Perform addition (ALUOp 0b000), B invert (1), Carry in (1), Write enable (1)
# = 0x000D
000D

# Opcode 2: and
# Bits  7 6-4 3 2 1 0
#     0b0 001 0 0 0 1
# Explanation: bitwise AND (ALUOp 0b001), Write enable (1)
# = 0x0011
0011

# Opcode 3: or
# Bits  7 6-4 3 2 1 0
#     0b0 010 0 0 0 1
# Explanation: bitwise OR (ALUOp 0b010), Write enable (1)
# = 0x0021
0021

# Opcode 4: nand
# Bits  7 6-4 3 2 1 0
#     0b0 010 0 1 1 1
# Explanation: bitwise OR (ALUOp 0b010), A invert (1), B invert (1), Write enable (1)
# = 0x0027
0027

# Opcode 5: nor
# Bits  7 6-4 3 2 1 0
#     0b0 001 0 1 1 1
# Explanation: bitwise AND (ALUOp 0b001), A invert (1), B invert (1), Write enable (1)
# = 0x0017
0017

# Opcode 6: xor
# Bits  7 6-4 3 2 1 0
#     0b0 011 0 0 0 1
# Explanation: bitwise XOR (ALUOp 0b011), Write enable (1)
# = 0x0031
0031

# Opcode 7: slt
# Bits  7 6-4 3 2 1 0
#     0b0 100 0 0 0 1
# Explanation: slt (ALUOp 0b100), Write enable (1)
# = 0x0041
0041

# Opcode 8: sltu
# Bits  7 6-4 3 2 1 0
#     0b0 101 0 0 0 1
# Explanation: sltu (ALUOp 0b101), Write enable (1)
# = 0x0051
0051

# Opcode 9: lb
# Bits  E D C B A 9 8 7 6-4 3 2 1 0
#     0b0 1 0 0 0 0 0 0 000 0 0 0 1 (store from Rd, byte, add, write enable)
# = 0x2001
2001

# Opcode 10: lw
# Bits  E D C B A 9 8 7 6-4 3 2 1 0
#     0b0 1 1 0 0 0 0 0 000 0 0 0 1 (store from Rd, word, add, write enable)
# = 0x3001
3001

# Opcode 11: sb
# Bits  E D C B A 9 8 7 6-4 3 2 1 0
#     0b0 1 0 1 1 0 0 0 000 0 0 0 0 (store from Rd, byte, We, add, write disable)
# = 0x2C00
2C00

# Opcode 12: sw
# Bits  E D C B A 9 8 7 6-4 3 2 1 0
#     0b0 1 1 1 1 0 0 0 000 0 0 0 0 (store from Rd, word, We, add, write disable)
# = 0x3C00
3C00

# Opcode 13: beq
# Bits  E D C B A 9 8 7 6-4 3 2 1 0
#     0b1 0 0 0 1 0 1 0 000 1 1 0 0 (subtract, check if zero, disable write)
# = 0x440C
440C

# Opcode 14: bne
# Bits  E D C B A 9 8 7 6-4 3 2 1 0
#     0b1 0 0 0 1 1 1 0 000 1 1 0 0 (subtract, check if zero, disable write)
# = 0x470C
470C

# Opcode 15: j
# Bits  7 6-4 3 2 1 0
#     0b1 000 0 0 0 1
# = 0x0080
0081
